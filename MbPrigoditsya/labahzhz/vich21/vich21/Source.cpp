#include <iostream>
using namespace std;

const int MAX_SIZE = 100;
//Внешний цикл по i проходит по строкам матрицы A, при этом
//на каждой итерации внешнего цикла происходит нормализация i-ой строки матрицы A путем деления всех элементов этой строки на A[i][i]
//Также на каждой итерации внешнего цикла происходит нормализация i-го элемента вектора B путем деления его на A[i][i].
//Внутренний цикл по j проходит по столбцам матрицы A
//На каждой итерации внутреннего цикла происходит зануление элементов матрицы A, расположенных ниже и выше диагонали, 
//относительно текущей строки i-ой, путем вычитания из каждой строки, отличной от i-ой, произведения j-го элемента этой строки на i-й элемент j-й строки.
//Также на каждой итерации внутреннего цикла происходит зануление i-го элемента вектора B 
//путем вычитания из каждого элемента, отличного от i-го, произведения j-го элемента этого вектора на i-й элемент j-й строки матрицы A.
void gauss_jordan(double A[][MAX_SIZE], double B[], int n) {
    double pivot, temp;
    int i, j, k;
    for (i = 0; i < n; i++) {
        pivot = A[i][i];

        for (j = 0; j < n; j++) {
            A[i][j] /= pivot;
        }

        B[i] /= pivot;

        for (j = 0; j < n; j++) {
            if (i != j) {
                temp = A[j][i];

                for (k = 0; k < n; k++) {
                    A[j][k] -= temp * A[i][k];
                }

                B[j] -= temp * B[i];
            }
        }
    }
}

int main() {
    setlocale(LC_ALL, "Russian");
    double A[MAX_SIZE][MAX_SIZE], B[MAX_SIZE];
    int n, i, j;

    cout << "Введите размерность матрицы: ";
    cin >> n;

    cout << "Введите элементы матрицы A:\n";
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            cin >> A[i][j];
        }
    }

    cout << "Введите элементы вектора B:\n";
    for (i = 0; i < n; i++) {
        cin >> B[i];
    }

    gauss_jordan(A, B, n);

    cout << "Решение СЛАУ AX = B:" << endl;
    for (i = 0; i < n; i++) {
        cout << "X" << i + 1 << " = " << B[i] << endl;
    }

    return 0;
}